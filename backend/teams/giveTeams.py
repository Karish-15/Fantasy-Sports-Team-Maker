import pandas as pd
import io
from dotenv import load_dotenv
import os
import redis

from Main.makeTeams import makeTeams

def makeDataframe(file_obj):
    dataframe = pd.read_csv(io.StringIO(file_obj.read().decode('utf-8')), delimiter=',')
    return dataframe

def makeDataframe_list(list):
    dataframe = pd.DataFrame(list)
    return dataframe

# Also check if all columns are present or not
def csv_valid(file_obj, df):
    if not str(file_obj).endswith('.csv'):
        return False
    required_columns = [
        'Name', 'TEAM', 'POS', 'VALUE', 'POINTS'
        ]
    csv_columns = df.columns.tolist()
    for column in required_columns:
        if not column in csv_columns:
            return False

    return True

def form_teams(df, request_data):
    results = makeTeams(df, request_data)

    #Check if something can be done with Dataframe object
    response = {
        # "Dataframe": results[1],
        "Match": results[3][0] + ' vs ' + results[3][1], 
        "Time Taken": results[2],
        "Teams": results[0],
    }

    return response

def give_sample_data():
    sample_data = {'Name': {0: 'RAHUL', 1: 'MAYANK', 2: 'POORAN', 3: 'GAYLE', 4: 'HOODA', 5: 'MASHWIN', 6: 'JORDAN', 7: 'SHAMI', 8: 'BISHNOI', 9: 'ARSHDEEP', 10: 'MANDEEP', 11: 'BUTTLER', 12: 'SAMSON', 13: 'STOKES', 14: 'TEWATIA', 15: 'PARAG', 16: 'DUBE', 17: 'MORRIS', 18: 'ARCHER', 19: 'GOPAL', 20: 'UNADKAT', 21: 'TYAGI'}, 'm1': {0: 57, 1: 0, 2: 40, 3: 133, 4: 13, 5: 25, 6: 23, 7: -2, 8: 4, 9: -2, 10: 2, 11: 31, 12: 62, 13: 132, 14: 20, 15: 4, 16: 40, 17: 39, 18: 54, 19: 4, 20: 0, 21: 4}, 'm2': {0: 52, 1: 0, 2: 14, 3: 83, 4: 4, 5: 37, 6: 54, 
7: 79, 8: 64, 9: 2, 10: 90, 11: 4, 12: 76, 13: 163, 14: 4, 15: 4, 16: 18, 17: 19, 18: 62, 19: 54, 20: 0, 21: 23}, 'm3': {0: 51, 1: 0, 2: 46, 3: 28, 4: 2, 5: 41, 6: 106, 7: 29, 8: 47, 9: 81, 10: 30, 11: 13, 12: 45, 13: 38, 14: 6, 15: 28, 16: 25, 17: 27, 18: 75, 19: 4, 20: 0, 21: -2}, 'm4': {0: 30, 1: 25, 2: 77, 3: 40, 4: 18, 5: 29, 6: 0, 7: 54, 8: 4, 9: 2, 10: 0, 11: 109, 12: 16, 13: 24, 14: 41, 15: 4, 16: 32, 17: 8, 18: 37, 19: 35, 20: 0, 21: 29}, 'm5': {0: 102, 1: 24, 2: 42, 3: 33, 4: 38, 5: 18, 6: 40, 7: 54, 8: 31, 9: 48, 10: 0, 11: 31, 12: 15, 13: 29, 14: 59, 15: 4, 16: 77, 17: 62, 18: 2, 19: 29, 20: -2, 21: 29}, 'm6': {0: 100, 1: 59, 2: 20, 3: 76, 4: 12, 5: 56, 6: 37, 7: 48, 8: 2, 9: 27, 10: 0, 
11: 31, 12: 33, 13: 45, 14: 27, 15: 5, 16: 5, 17: 49, 18: 100, 19: 36, 20: 50, 21: 45}, 'm7': {0: 92, 1: 76, 2: 36, 3: 0, 4: 0, 5: 0, 6: 2, 7: 35, 8: 29, 9: 37, 10: 8, 11: 29, 12: 41, 13: 10, 14: 65, 15: 52, 16: 9, 17: 25, 18: 35, 19: 4, 20: 29, 21: 27}, 'm8': {0: 13, 1: 14, 2: 116, 3: 0, 4: 0, 5: 0, 6: 0, 7: 27, 8: 84, 9: 70, 10: 10, 11: 27, 12: 9, 13: 0, 14: 98, 15: 0, 16: 40, 17: 0, 18: 91, 19: 0, 20: 0, 21: 31}, 'm9': {0: 84, 1: 33, 2: 44, 3: 0, 4: 0, 5: 0, 6: -2, 7: 2, 8: 4, 9: 0, 10: 35, 11: 104, 12: 10, 13: 0, 14: 18, 
15: 0, 16: 11, 17: 0, 18: 58, 19: 63, 20: 0, 21: 27}, 'm10': {0: 22, 1: 32, 2: 55, 3: 0, 4: 0, 5: 0, 6: 0, 7: 41, 8: 3, 9: 0, 10: 0, 11: 31, 12: 9, 13: 0, 14: 34, 15: 21, 16: 10, 17: 22, 18: 52, 19: 29, 20: 0, 21: 0}, 'm11': {0: 98, 1: 158, 2: 44, 3: 0, 4: 0, 5: 29, 6: 0, 7: 81, 8: 4, 9: 0, 10: 0, 11: 38, 12: 21, 13: 0, 14: 45, 15: 13, 16: 7, 17: 6, 18: 74, 19: 5, 20: 46, 21: 0}, 'm12': {0: 180, 1: 42, 2: 22, 3: 0, 4: 0, 5: 79, 6: 0, 7: 33, 8: 95, 9: 0, 10: 0, 11: 8, 12: 123, 13: 0, 14: 79, 15: 2, 16: 73, 17: 15, 18: 15, 19: 
8, 20: 2, 21: 0}, 'm13': {0: 49, 1: 124, 2: 8, 3: 0, 4: 0, 5: 0, 6: 19, 7: 93, 8: 31, 9: 0, 10: 0, 11: 0, 12: 145, 13: 0, 14: 88, 15: 11, 16: 93, 17: 9, 18: 64, 19: 27, 20: 0, 21: 0}, 'total': {0: 930, 1: 587, 2: 564, 3: 393, 4: 87, 5: 314, 6: 279, 7: 574, 8: 402, 9: 265, 10: 175, 11: 408, 12: 422, 13: 108, 14: 554, 15: 112, 16: 357, 17: 196, 18: 528, 
19: 236, 20: 125, 21: 188}, 'MEAN': {0: 62.125, 1: 39.6, 2: 48.875, 3: 65.5, 4: 14.5, 5: 34.3333333333333, 6: 43.6666666666667, 7: 40.5, 8: 33.125, 9: 33.125, 10: 28.0, 11: 34.375, 12: 37.125, 13: 63.0, 14: 40.0, 15: 14.4285714285714, 16: 30.75, 17: 32.7142857142857, 18: 57.0, 19: 23.7142857142857, 20: 25.6666666666667, 21: 23.25}, 'STANDARD': {0: 30.8522183157062, 1: 23.7200337267888, 2: 30.9169755150791, 3: 36.7094447429178, 4: 11.8286375659527, 5: 12.2701082128706, 6: 32.1800490297258, 7: 22.5111083689809, 8: 28.3303613637384, 9: 29.7843813936096, 10: 32.3975307701065, 11: 29.7192593279173, 12: 22.2229470367906, 13: 55.0272659687904, 14: 30.3562184733211, 15: 17.4016185031914, 16: 21.3409817018805, 17: 17.1273739602868, 18: 30.1496268633627, 19: 18.4755768184788, 20: 21.3593591248011, 21: 14.2368360249038}, 'MEDIAN': {0: 54.5, 1: 25.0, 2: 41.0, 3: 58.0, 4: 12.5, 5: 33.0, 6: 38.5, 7: 41.5, 8: 30.0, 9: 32.0, 10: 10.0, 11: 30.0, 12: 37.0, 13: 38.0, 14: 34.0, 15: 4.0, 16: 28.5, 17: 27.0, 18: 58.0, 19: 29.0, 20: 29.0, 21: 28.0}, 'VALUE': {0: 8.5, 1: 10.0, 2: 9.5, 3: 8.5, 4: 8.5, 5: 9.0, 6: 9.0, 7: 8.5, 8: 9.0, 9: 8.5, 10: 8.0, 11: 9.0, 12: 9.5, 13: 9.0, 14: 9.0, 15: 9.0, 16: 8.5, 17: 8.0, 18: 8.5, 19: 8.5, 20: 8.0, 21: 8.0}, 'POS': {0: 'WK', 1: 'BAT', 2: 'WK', 3: 'BAT', 4: 'ALL', 5: 'BOWL', 6: 'BOWL', 7: 'BOWL', 8: 'BOWL', 9: 'BOWL', 10: 'BAT', 11: 'WK', 12: 'WK', 13: 'ALL', 14: 'ALL', 15: 'BAT', 16: 'ALL', 17: 'ALL', 18: 'BOWL', 19: 'BOWL', 20: 'BOWL', 21: 'BOWL'}, 'TEAM': {0: 'PBKS', 1: 'PBKS', 2: 'PBKS', 3: 'PBKS', 4: 'PBKS', 5: 'PBKS', 6: 'PBKS', 7: 'PBKS', 8: 'PBKS', 9: 'PBKS', 10: 'PBKS', 11: 'RR', 12: 'RR', 13: 'RR', 14: 'RR', 15: 'RR', 16: 'RR', 17: 'RR', 18: 'RR', 19: 'RR', 20: 'RR', 21: 'RR'}, 'POINTS': {0: 142, 1: 20, 2: 2, 3: 58, 
4: 114, 5: 2, 6: 0, 7: 62, 8: 0, 9: 91, 10: 0, 11: 40, 12: 179, 13: 10, 14: 8, 15: 75, 16: 34, 17: 62, 18: 0, 19: -2, 20: 0, 21: 0}, 'FREQ': {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0, 17: 0, 18: 0, 19: 0, 20: 0, 21: 0}}

    df = pd.DataFrame.from_dict(sample_data)
    return df

def give_sample_data_redis():
    load_dotenv()
    r = redis.Redis(
        host=os.environ.get('REDIS_HOST'),
        port=10370,
        password=os.environ.get('REDIS_PASSWORD'))

    l = list((r.json().get(name='players')['players']))

    return l;
